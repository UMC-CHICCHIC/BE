name: Deploy

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2) JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3) gradlew 실행 권한 부여 (Permission denied 방지)
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4) 빌드 (테스트 제외)
      - name: Build (skip tests)
        run: ./gradlew clean build -x test

      # 5) Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6) 이미지 빌드 & 푸시 (latest로 통일)
      - name: Build & Push (latest)
        run: |
          docker build -t sungminju/chicchic:latest .
          docker push sungminju/chicchic:latest

      # 7) EC2 배포: .env 생성 → pull → compose 재기동 → 청소
      - name: Deploy on EC2 (create .env, pull & restart)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.ELASTIC_IP }}
          username: ubuntu
          key: ${{ secrets.PEM_KEY }}
          script: |
            set -e
            mkdir -p ~/app
            cd ~/app

            # .env 생성 (GitHub Secrets 값 사용)
            cat > .env <<'EOF'
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
            NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            cloud.aws.credentials.accessKey=${{ secrets.AWS_ACCESS_KEY }}
            cloud.aws.credentials.secretKey=${{ secrets.AWS_SECRET_KEY }}
            cloud.aws.region.static=${{ secrets.AWS_REGION }}
            cloud.aws.s3.bucket=${{ secrets.AWS_BUCKET }}
            EOF

            # 최신 이미지 가져와서 컨테이너 교체 실행
            sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            sudo docker pull sungminju/chicchic:latest

            # docker compose 플러그인/구버전 모두 대응
            if command -v docker compose >/dev/null 2>&1; then
              sudo docker compose up -d --remove-orphans
            else
              sudo docker-compose -p chicchic up -d --remove-orphans
            fi

            # 오래된 이미지 정리(선택)
            sudo docker image prune -af --filter "until=24h"
            # 
